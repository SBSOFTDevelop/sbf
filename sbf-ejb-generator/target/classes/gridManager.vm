package ${package};

import java.lang.reflect.Field;
import java.util.List;
import java.util.ArrayList;
import javax.annotation.Generated;
import javax.annotation.security.PermitAll;
import javax.ejb.Local;
import javax.ejb.Remote;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import ru.sbsoft.dao.AbstractGridDaoBean;
import ru.sbsoft.dao.AbstractTemplate;
import ru.sbsoft.dao.DefaultTemplateBuilder;
import ru.sbsoft.dao.GridSupport;
import ru.sbsoft.dao.IGridDao;
import ru.sbsoft.dao.ITemplateManager;
import ru.sbsoft.meta.context.IGlobalQueryContextFactory;
import ru.sbsoft.meta.context.ISQLBuilderFactory;
import ru.sbsoft.shared.GridContext;
import ru.sbsoft.shared.interfaces.GridType;
import ru.sbsoft.shared.interfaces.IDynamicGridType;
#parse( "commonImport.vm" )

@Stateless
@Remote(IGridDao.class)
@Local(GridSupport.class)
@TransactionAttribute(TransactionAttributeType.REQUIRED)
@PermitAll
@Generated(value="", date = "$now")
public class $genClassName extends AbstractGridDaoBean implements IGridDao, GridSupport {

#parse( "commonHead.vm" )       
#parse( "entityHolder.vm" )
    private final IGlobalQueryContextFactory globalQueryContextFactory;

    @Generated(value="", date = "$now")
    public ${genClassName}(){
        
        globalQueryContextFactory = (String username, boolean isAdmin) -> {
            ru.sbsoft.meta.context.GlobalQueryContext c = new ru.sbsoft.meta.context.GlobalQueryContext(username, isAdmin, getAppDao());
#foreach ($field in $globalQueryContext.fields)        
                inject(c, $field.className, "$field.fieldName", $field.varName);           
#end
            return c;

        };

    }

    @Generated(value="", date = "$now")
    @Override
    public DefaultTemplateBuilder getTemplateBuilder(GridContext context) {
        
        final AbstractTemplate template = getTemplate(context);
        final ISQLBuilderFactory sqlBuilderFactory = () -> {
            ru.sbsoft.meta.sql.SQLBuilder b =  new ${sqlBuilder.name}(template);         
#foreach ($field in $sqlBuilder.fields)        
                inject(b, $field.className, "$field.fieldName", $field.varName);           
#end
            return b;
        };
#if( !$unitTemplates.isEmpty() )    
        ru.sbsoft.dao.ITemplateContext ctx;
        if (template instanceof TemplateAdapter) {
            final javax.persistence.EntityManager em = entityHolder.getEm(((TemplateAdapter) template).unitName);

            ctx = new ru.sbsoft.dao.ITemplateContext() {
                @Override
                public javax.persistence.EntityManager getEntityManager() {
                  return em;
                }               
                @Override
                public ru.sbsoft.dao.IJdbcWorkExecutor getJdbcWorkExecutor() {
                  return new ru.sbsoft.dao.JdbcWorkExecutor(em);
                }

                @Override
                public javax.ejb.SessionContext getSessionContext() {
                  return sessionContext;
                }
            };

        } else {
            ctx = getDefaultTemplateContext();
        }

        ${templateBuilder.name} tb =  new ${templateBuilder.name}(template, ctx, globalQueryContextFactory, sqlBuilderFactory);
#else
        ${templateBuilder.name} tb =  new ${templateBuilder.name}(template, getDefaultTemplateContext(), globalQueryContextFactory, sqlBuilderFactory);
#end
#foreach ($field in $templateBuilder.fields)        
        inject(tb, $field.className, "$field.fieldName", $field.varName);           
#end
        return tb;
    }
#if( !$unitTemplates.isEmpty() ) 
    @Generated(value="", date = "$now")
    private class TemplateAdapter extends AbstractTemplate {

        private final AbstractTemplate template;
        private final String unitName;

        public TemplateAdapter(final AbstractTemplate template, final String unitName) {
            this.template = template;
            this.unitName = unitName;
        }

        @Override
        public void buildFromClause(StringBuilder sb) {
            template.buildFromClause(sb);
        }

        @Override
        protected ru.sbsoft.meta.ColumnsInfo createColumns() {
            return template.getColumnsInfo();

        }
     

    }    
#end

    @Generated(value="", date = "$now")
    @Override
    protected ITemplateManager getTemplateManager() {
        return templateManager;
    }

    private final TemplateManager templateManager = new TemplateManager();

    @Generated(value="", date = "$now")
    private class TemplateManager implements ITemplateManager {

        @Override
        public AbstractTemplate initTemplate(GridType type) throws Exception {
            
#initEntityHolder( )
            AbstractTemplate template = null;
#if ( !$dyntemplates.isEmpty() )
            if (type instanceof IDynamicGridType) {
                IDynamicGridType dyntype = (IDynamicGridType) type;
                switch (dyntype.getGroupCode()) {
#foreach ($dyntemplate in $dyntemplates)
                    case "$dyntemplate.code":
#if( $dyntemplate.unitName )                        
                        $dyntemplate.className $dyntemplate.createMethodName = new ${dyntemplate.className}(entityHolder.getEm("$dyntemplate.unitName"), dyntype.getId());                        
                        template = new TemplateAdapter(${dyntemplate.createMethodName}, "$dyntemplate.unitName");
#else
                        $dyntemplate.className $dyntemplate.createMethodName = new ${dyntemplate.className}(entityManager, dyntype.getId());                        
                        template = ${dyntemplate.createMethodName};
#end
                       break;
#end
                }
            } else {
#end
                switch (type.getCode()) {
#foreach ($template in $templates)
                    case "$template.code":
                        $template.className $template.createMethodName = new ${template.className}();
#foreach ($field in $template.fields)        
                        inject($template.createMethodName, ${field.className}.class, "${field.fieldName}", $field.varName);           
#end
#if (${template.postConstructMethod})
                        ${template.createMethodName}.${template.postConstructMethod}();
#end
#if( !$template.unitName )                        
                        template = ${template.createMethodName};
#else
                        template = new TemplateAdapter(${template.createMethodName}, "$template.unitName");
#end                        
                        break;
#end
                    default:
#if (${templateManager})
                        template = ${templateManager.name}.getInstance().initTemplate(type);
#end
                }
#if (!$dyntemplates.isEmpty())           
            }
#end 
           if(template == null){
              throw new IllegalArgumentException("Unknown grid template type: " + type);
           }
           Enum typeEnum = type instanceof Enum ? (Enum)type : getEnumByCode(type instanceof IDynamicGridType ? ((IDynamicGridType)type).getGroupCode() : type.getCode());
           if(typeEnum != null){
              template.addSysMode(typeEnum);
           }else{
              template.addModifier(type.getCode());
           }
           return template;
        }
    }

    @Generated(value="", date = "$now")
    @Override
    public List<String> getGridTemplatesCode() {
        List<String> result = new ArrayList<>();
#foreach ($template in $templates)
        result.add("${template.code}");
#end  
        return result;
    }

    @Generated(value="", date = "$now")
    @Override
    public List<String> getDynGridTemplatesCode() {
        List<String> result = new ArrayList<>();
#foreach ($dyntemplate in $dyntemplates)
        result.add("${dyntemplate.code}");
#end  
        return result;
    }

    @Generated(value="", date = "$now")
    private static void inject(AbstractTemplate tem, Class clazz, String field, Object val) {
        try {
            final Field f = clazz.getDeclaredField(field);
            f.setAccessible(true);
            f.set(tem, val);
        } catch (IllegalAccessException | SecurityException | NoSuchFieldException ex) {
            throw new RuntimeException(ex);
        }
    }

    @Generated(value="", date = "$now")
    private static Enum getEnumByCode(String gridCode) {
        Enum res = null;
#foreach($type in $templateTypes)
        if(res == null){
            try{
                res = ${type}.valueOf(gridCode);
            } catch(IllegalArgumentException ex){
                // jast ignore
            }
        }
#end
#foreach($type in $dynTemplateTypes)
        if(res == null){
            try{
                res = ${type}.valueOf(gridCode);
            } catch(IllegalArgumentException ex){
                // jast ignore
            }
        }
#end
        return res;
    }
}